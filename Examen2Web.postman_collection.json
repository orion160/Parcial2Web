{
	"info": {
		"_postman_id": "1a074311-ed27-4dc5-921b-810978f84c77",
		"name": "Examen2Web",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30177121"
	},
	"item": [
		{
			"name": "Evaluation",
			"item": [
				{
					"name": "Crear Evaluacion",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.id).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/evaluation",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"evaluation"
							]
						},
						"description": "The `POST /evaluation` endpoint is used to submit an evaluation. Upon successful submission, the server responds with a status code of 201 and a JSON object in the response body containing the `id` of the evaluation.\n\n### Response\n\nThe response is in JSON format and has the following schema:\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"id\": {\n      \"type\": \"number\"\n    }\n  },\n  \"required\": [\"id\"]\n}\n\n ```"
					},
					"response": []
				}
			]
		},
		{
			"name": "Student",
			"item": [
				{
					"name": "Crear Estudiante",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.have.property('id');\r",
									"    pm.expect(responseData).to.have.property('dni');\r",
									"    pm.expect(responseData).to.have.property('name');\r",
									"    pm.expect(responseData).to.have.property('semester');\r",
									"    pm.expect(responseData).to.have.property('program');\r",
									"    pm.expect(responseData).to.have.property('pga');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"DNI is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.dni).to.be.a('number');\r",
									"    pm.expect(responseData.dni).to.be.at.least(0, \"DNI should be a non-negative integer\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Semester is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.semester).to.be.a('number');\r",
									"    pm.expect(responseData.semester).to.be.at.least(0, \"Semester should be a non-negative integer\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"dni\": 123456789,\r\n  \"name\": \"John Doe\",\r\n  \"semester\": 5,\r\n  \"program\": \"Engineering\",\r\n  \"pga\": 4.0\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/student",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"student"
							]
						},
						"description": "### Create Student Information\n\nThis endpoint allows you to create a new student record.\n\n#### Request Body\n\n- `dni` (number) - The student's identification number.\n    \n- `name` (string) - The name of the student.\n    \n- `semester` (number) - The current semester of the student.\n    \n- `program` (string) - The program in which the student is enrolled.\n    \n- `pga` (number) - The student's current PGA.\n    \n\n#### Response (JSON Schema)\n\n``` json\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"number\"\n        },\n        \"dni\": {\n            \"type\": \"number\"\n        },\n        \"name\": {\n            \"type\": \"string\"\n        },\n        \"semester\": {\n            \"type\": \"number\"\n        },\n        \"program\": {\n            \"type\": \"string\"\n        },\n        \"pga\": {\n            \"type\": \"number\"\n        }\n    }\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "Eliminar Estudiante",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/student/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"student",
								"1"
							]
						},
						"description": "The `DELETE` request is used to delete a specific student with the ID `1` from the server.\n\n### Response\n\nThe response for this request is in JSON format with the following schema:\n\n``` json\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"message\": {\n            \"type\": \"string\"\n        },\n        \"error\": {\n            \"type\": \"string\"\n        },\n        \"statusCode\": {\n            \"type\": \"integer\"\n        }\n    }\n}\n\n ```"
					},
					"response": []
				}
			]
		},
		{
			"name": "Professor",
			"item": [
				{
					"name": "Crear Profesor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response schema for id, dni, name, faculty, extension, and peerReviewed\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.id).to.exist.and.to.be.a('number');\r",
									"    pm.expect(responseData.dni).to.exist.and.to.be.a('number');\r",
									"    pm.expect(responseData.name).to.exist.and.to.be.a('string');\r",
									"    pm.expect(responseData.faculty).to.exist.and.to.be.a('string');\r",
									"    pm.expect(responseData.extension).to.exist.and.to.be.a('number');\r",
									"    pm.expect(responseData.peerReviewed).to.exist.and.to.be.a('boolean');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"dni\": 987654321,\r\n  \"name\": \"Ana PÃ©rez\",\r\n  \"faculty\": \"Ciencias\",\r\n  \"extension\": 12345,\r\n  \"peerReviewed\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/professor",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"professor"
							]
						},
						"description": "### Professor Creation\n\nThis endpoint allows you to create a new professor.\n\n#### Request Body\n\n- `dni` (number): The DNI of the professor.\n    \n- `name` (string): The name of the professor.\n    \n- `faculty` (string): The faculty to which the professor belongs.\n    \n- `extension` (number): The extension number of the professor.\n    \n- `peerReviewed` (boolean): Indicates if the professor's work is peer-reviewed.\n    \n\n#### Response\n\nThe response is in JSON format and follows the schema below:\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"id\": {\n      \"type\": \"number\"\n    },\n    \"dni\": {\n      \"type\": \"number\"\n    },\n    \"name\": {\n      \"type\": \"string\"\n    },\n    \"faculty\": {\n      \"type\": \"string\"\n    },\n    \"extension\": {\n      \"type\": \"number\"\n    },\n    \"peerReviewed\": {\n      \"type\": \"boolean\"\n    }\n  }\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "Asignar Evaluador",
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/professor/1/asignar-evaluador",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"professor",
								"1",
								"asignar-evaluador"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Project",
			"item": [
				{
					"name": "Avanzar Proyecto",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/project/2/avanzar",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"project",
								"2",
								"avanzar"
							]
						},
						"description": "The HTTP PATCH request is used to advance a project with ID 1.\n\n### Response\n\nThe response returned is in JSON format with the following schema:\n\n``` json\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"message\": {\n            \"type\": \"string\"\n        },\n        \"error\": {\n            \"type\": \"string\"\n        },\n        \"statusCode\": {\n            \"type\": \"number\"\n        }\n    }\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "Encontrar estudiantes proyecto",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/project/1/estudiantes",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"project",
								"1",
								"estudiantes"
							]
						},
						"description": "### GET /project/1/estudiantes\n\nThis endpoint retrieves a list of students associated with the project with ID 1.\n\n#### Response\n\n- Status: 200\n    \n- Content-Type: application/json\n    \n\nExample Response Body:\n\n``` json\n[\n    {\n        \"id\": 0,\n        \"title\": \"\",\n        \"field\": \"\",\n        \"budget\": 0,\n        \"finalGrade\": 0,\n        \"state\": 0,\n        \"startDate\": \"\",\n        \"endDate\": \"\",\n        \"leader\": null\n    }\n]\n\n ```"
					},
					"response": []
				},
				{
					"name": "Crear Proyecto",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('id');\r",
									"    pm.expect(responseData).to.have.property('title');\r",
									"    pm.expect(responseData).to.have.property('field');\r",
									"    pm.expect(responseData).to.have.property('budget');\r",
									"    pm.expect(responseData).to.have.property('finalGrade');\r",
									"    pm.expect(responseData).to.have.property('state');\r",
									"    pm.expect(responseData).to.have.property('startDate');\r",
									"    pm.expect(responseData).to.have.property('endDate');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": \"Proyecto de InvestigaciÃ³n 2025\",\r\n  \"field\": \"IngenierÃ­a\",\r\n  \"budget\": 50000,\r\n  \"finalGrade\": 4,\r\n  \"state\": 1,\r\n  \"startDate\": \"2025-05-18\",\r\n  \"endDate\": \"2025-12-31\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/project",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"project"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}